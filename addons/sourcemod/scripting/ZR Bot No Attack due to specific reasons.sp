/* Plugin Template generated by Pawn Studio */

#include <sdktools>
#include <sourcemod>
#include <sdkhooks>
#include <cstrike>
#include <zombiereloaded>

public Plugin myinfo =
{
    name = "[ZR] Bot No Attack due to specific reasons",
    author = "[CNSR] FJH_03",
    description = "当回合开始没有出现僵尸时，有概率禁止Bot的射击行为，且会随情况恢复",
    version = "1.5",
    url = "<- URL ->"
}

public OnPluginStart()
{
    HookEvent("round_start", RoundStart, EventHookMode_Post);
	HookEvent("player_hurt", openFire);
	HookEvent("player_death", openFire);
}

bool g_botsNoAttackEnabled;

public void RoundStart(Handle hEvent, char[] chEvent, bool bDontBroadcast)
{
	new randomNum = GetRandomInt(1, 10);
	if (randomNum > 3) {
		g_botsNoAttackEnabled = true; // 启用禁止攻击
		PrintToChatAll("\x01\x03[\x04阻止Bot射击\x03]\x01 本局阻止了Bot的开火行为！")
	} else {
		g_botsNoAttackEnabled = false;
		PrintToChatAll("\x01\x03[\x04允许Bot射击\x03]\x01 本局不阻止Bot的开火行为！")
	}
}

public Action openFire(Event event, const char[] name, bool silent)
{
	if (g_botsNoAttackEnabled == true) {
		new attackerInt = GetEventInt(event, "attacker");
		int attacker = GetClientOfUserId(attackerInt);
		new victim = GetClientOfUserId(GetEventInt(event, "userid"));
		
		if (attackerInt && GetClientTeam(victim) != GetClientTeam(attacker)) {
			PrintToChatAll("\x01\x03[\x04允许Bot射击\x03]\x01 出现阵营交火伤亡情况，解除Bot开火限制！")
			g_botsNoAttackEnabled = false;
		}
	}
	
	return Plugin_Continue;
}

public Action OnPlayerRunCmd(int client, int &buttons, int &impulse, float vel[3], float angles[3], int &weapon, int &subtype, int &cmdnum, int &tickcount, int &seed, int mouse[2])
{	
	if (IsClient(client, true)) {
		if (ZR_IsClientZombie(client) && g_botsNoAttackEnabled == true) {
			g_botsNoAttackEnabled = false;
		}
	}
	
	if (g_botsNoAttackEnabled && IsFakeClient(client)) {
		if (buttons & IN_ATTACK) {
			buttons &= ~IN_ATTACK; // 清除攻击按钮			
		}
		
		if (buttons & IN_ATTACK2) {
			buttons &= ~IN_ATTACK2; //清除刀可能存在的重击按钮
		}
	}

    return Plugin_Continue; // 继续处理命令
}

//检测玩家属性函数
bool:IsClient(Client, bool:Alive)
{
	return Client <= MaxClients && IsClientConnected(Client) && IsClientInGame(Client) && (Alive && IsPlayerAlive(Client));
}