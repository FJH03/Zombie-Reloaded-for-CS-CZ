/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include <sdktools>
#include <zombiereloaded>

new String:NAME_OVERLAYS[][] = {"overlays/kill/kill_1","overlays/kill/kill_2","overlays/kill/kill_3","overlays/kill/kill_4",
"overlays/kill/kill_5","overlays/kill/kill_6","overlays/kill/kill_7","overlays/kill/kill_8",
"overlays/kill/kill_headshot","overlays/kill/kill_headshot_2","overlays/kill/kill_headshot_3","overlays/kill/kill_headshot_4",
"overlays/kill/kill_headshot_5","overlays/kill/kill_headshot_6","overlays/kill/kill_headshot_7","overlays/kill/kill_headshot_8",
"overlays/kill/kill_knife","overlays/kill/kill_knife_2","overlays/kill/kill_knife_3","overlays/kill/kill_knife_4",
"overlays/kill/kill_knife_5","overlays/kill/kill_knife_6","overlays/kill/kill_knife_7","overlays/kill/kill_knife_8",
"overlays/kill/kill_grenade","overlays/kill/kill_grenade_2","overlays/kill/kill_grenade_3","overlays/kill/kill_grenade_4",
"overlays/kill/kill_grenade_5","overlays/kill/kill_grenade_6","overlays/kill/kill_grenade_7","overlays/kill/kill_grenade_8"};

enum {
	kill_1,
	kill_2,
	kill_3,
	kill_4,
	kill_5,
	kill_6,
	kill_7,
	kill_8,
	kill_headshot,
	kill_headshot_2,
	kill_headshot_3,
	kill_headshot_4,
	kill_headshot_5,
	kill_headshot_6,
	kill_headshot_7,
	kill_headshot_8,
	kill_knife,
	kill_knife_2,
	kill_knife_3,
	kill_knife_4,
	kill_knife_5,
	kill_knife_6,
	kill_knife_7,
	kill_knife_8,
	kill_grenade,
	kill_grenade_2,
	kill_grenade_3,
	kill_grenade_4,
	kill_grenade_5,
	kill_grenade_6,
	kill_grenade_7,
	kill_grenade_8
};

new Handle:g_taskClean[MAXPLAYERS+1] = INVALID_HANDLE;
new Handle:g_taskCountdown[MAXPLAYERS+1] = INVALID_HANDLE;
new g_killCount[MAXPLAYERS+1] = 0;

public Plugin:myinfo = 
{
	name = "[ZR] CSS_8Kills For Human",
	author = "wTong, [CNSR] FJH_03",
	description = "CSO Killed Icon(与动态命中反馈插件做了兼容处理)",
	version = "2.2",
	url = "www.asdev.cn"
}

public OnPluginStart()
{
	// Add your own code here...
	HookEvent("player_death", Event_PlayerDeath);
	HookEvent("round_start", Event_round_start,EventHookMode_Post);
	
	UnlockConsoleCommandAndConvar("r_screenoverlay");
}

public OnMapStart()
{
	new String:overlays_file[64];
	for(new i = 0;i<sizeof(NAME_OVERLAYS);i++)
	{
		Format(overlays_file,sizeof(overlays_file),"%s.vtf",NAME_OVERLAYS[i]);
		PrecacheDecal(overlays_file,true);
		Format(overlays_file,sizeof(overlays_file),"materials/%s.vtf",NAME_OVERLAYS[i]);
		AddFileToDownloadsTable(overlays_file);
		
		Format(overlays_file,sizeof(overlays_file),"%s.vmt",NAME_OVERLAYS[i]);
		PrecacheDecal(overlays_file,true);
		Format(overlays_file,sizeof(overlays_file),"materials/%s.vmt",NAME_OVERLAYS[i]);
		AddFileToDownloadsTable(overlays_file);
	}
}

public Event_PlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
	new victim = GetClientOfUserId(GetEventInt(event, "userid"))
	new attacker = GetClientOfUserId(GetEventInt(event, "attacker"));
	new bool:headshot = GetEventBool(event, "headshot");
	new String:weapon[32];
	GetEventString(event, "weapon",weapon, sizeof(weapon));
	
	g_killCount[victim] = 0;
	if(g_taskCountdown[victim] != INVALID_HANDLE)
	{
		KillTimer(g_taskCountdown[victim]);
		g_taskCountdown[victim] = INVALID_HANDLE;
	}
	
	if(attacker < 1 || attacker == victim || IsFakeClient(attacker) || ZR_IsClientZombie(attacker) || GetClientTeam(victim) == GetClientTeam(attacker)) 
		return;
	
	if(g_killCount[attacker] < 8) 
		g_killCount[attacker]++;
		
	if(g_taskCountdown[attacker] !=INVALID_HANDLE)
	{
		KillTimer(g_taskCountdown[attacker]);
		g_taskCountdown[attacker] =INVALID_HANDLE;
	}
	g_taskCountdown[attacker] = CreateTimer(10.0,task_Countdown,attacker,1);
	
	if (g_killCount[attacker] != 0) {
		new encodedData;
		if(StrEqual(weapon, "hegrenade")) {
			encodedData = (attacker & 0xFF) | ((kill_grenade + g_killCount[attacker] - 1 & 0xFF) << 8);			
		}
			
		else if(StrEqual(weapon, "knife")) {
			encodedData = (attacker & 0xFF) | ((kill_knife + g_killCount[attacker] - 1 & 0xFF) << 8);
		}
			
		else if(headshot) {
			encodedData = (attacker & 0xFF) | ((kill_headshot + g_killCount[attacker] - 1 & 0xFF) << 8);
		}
			
		else {
			encodedData = (attacker & 0xFF) | ((g_killCount[attacker] - 1 & 0xFF) << 8);
		}
		
		CreateTimer(0.5, ShowKillMessage, encodedData);
	}	
			
	
	if(g_taskClean[attacker] != INVALID_HANDLE)
	{
		KillTimer(g_taskClean[attacker]);
		g_taskClean[attacker] =INVALID_HANDLE;
	}
	g_taskClean[attacker] = CreateTimer(5.0,task_Clean,attacker);
}

public Event_round_start(Handle:event,const String:name[],bool:dontBroadcast)
{
	for(new client=1;client <= MaxClients; client++)
	{
		g_killCount[client] = 0;
		if(g_taskCountdown[client] != INVALID_HANDLE)
		{
			KillTimer(g_taskCountdown[client]);
			g_taskCountdown[client] = INVALID_HANDLE;
		}
	}
}

public Action:task_Clean(Handle:Timer, any:client)
{
	KillTimer(Timer);
	g_taskClean[client] = INVALID_HANDLE;
	
	ClientCommand(client, "r_screenoverlay \"\"");
}

public Action:task_Countdown(Handle:Timer, any:client)
{
	g_killCount[client] = 0;
	if(!IsPlayerAlive(client) || g_killCount[client]==0)
	{
		KillTimer(Timer);
		g_taskCountdown[client] = INVALID_HANDLE;
	}
}

public Action ShowKillMessage(Handle timer, any encodedData)
{
	KillTimer(timer);
	new client = encodedData & 0xFF; // 获取 client
    new type = (encodedData >> 8) & 0xFF; // 获取 type
	
	ClientCommand(client, "r_screenoverlay \"%s\"", NAME_OVERLAYS[type]);
    return Plugin_Continue;
}

public OnClientDisconnect_Post(client)
{	
	if(g_taskClean[client] != INVALID_HANDLE)
	{
		KillTimer(g_taskClean[client]);
		g_taskClean[client] = INVALID_HANDLE;
	}
}

UnlockConsoleCommandAndConvar(const String:command[])
{
    new flags = GetCommandFlags(command);
    if (flags != INVALID_FCVAR_FLAGS)
    {
        SetCommandFlags(command, flags & ~FCVAR_CHEAT);
    }
    
    new Handle:cvar = FindConVar(command);
    if (cvar != INVALID_HANDLE)
    {
        flags = GetConVarFlags(cvar);
        SetConVarFlags(cvar, flags & ~FCVAR_CHEAT);
    }
} 